#!/usr/bin/env python3

import os
import sys
import getpass
import getopt
import re
sys.path.append("tmpixauto")
# Source our functions
from functions import start_automation, destroy_all_vm, destroy_vm, reset_vm
from functions import destroy_stopped_vm, create_ixautomation_interface
ixautomationconfig = "/usr/local/etc/ixautomation.conf"
templates = '/usr/local/ixautomation/vms/.templates'
profile_list = [re.sub('.conf', '', p) for p in os.listdir(templates)]

curentUser = getpass.getuser()
argument = sys.argv
app = argument[0]
sys.stdout.flush()

systype = "truenas"

# list of argument that should be use.
optionlist = [
    "run=",
    "ip=",
    "server-ip=",
    "vm-name=",
    "destroy-all-vm",
    "destroy-stopped-vm",
    "destroy-vm=",
    "keep-alive",
    "reset-vm=",
    "start-interface",
    "scale",
    "dev-test",
    "debug-mode",
    "profile="
]
sys_dict = {
    "truenas": "FreeNAS",
}
runlist = [
    "vm-tests",
    "api-tests",
    "webui-vm"
]

# verify it root user
if os.getuid() != 0:
    print(f"You need root privileged to run {app}")
    sys.exit(1)

UsageMSG = f"""
Usage for {app}:

Available Commands:

--run                     - Runs the given option
          vm-tests        - Install TrueNAS in a VM using vm-bhyve and
                            reboot in the installation.
          api-tests       - Start VM with REST API 1.0 tests for FreeNAS
          webui-vm        - Install TrueNAS and boot FreeNAS for UI test

--ip                      - IP and network card of the machine targeted to
                            run test against.
          0.0.0.0
          0.0.0.0:card

--vm-name vmname          - to create vm with a specific name

--scale                   - To use to run scale test

--server-ip               - IP of the targeted FreeNAS for TrueCommand
          0.0.0.0

--destroy-all-vm          - Stop all VM running, remove VM directory and ISO

--destroy-stopped-vm      - Stop all sopped running vm and remove all files

--destroy-vm              - Stop VM running, the remove VM directory
          ABCD            - VM name to stop

--reset-vm                - Reset the NAS to the the first boot stat
            0.0.0.0

--start-interface         - Start ixautomation switch interface

--keep-alive              - Keep the VM alive after test are done

--dev-test                - Start API test with --dev-test to only run
                            development API testing

--debug-mode              - Start API test with middleware debug mode

--profile                 - select the profile to create the VMS
"""

# if have no argument stop
if len(argument) == 1:
    print(UsageMSG)
    exit()

# look if all the argument are there.
try:
    myopts, args = getopt.getopt(argument[1:], 'rsi', optionlist)
except getopt.GetoptError as e:
    print(str(e))
    print(UsageMSG)
    sys.exit(1)

keep_alive = False
start_interface = False
ipnc = None
server_ip = None
scale = ''
vm_name = None
dev_test = ''
debug_mode = ''
profile = 'truenas'

for output, arg in myopts:
    if output == '--destroy-all-vm':
        destroy_all_vm()
        sys.exit(0)
    if output == '--destroy-stopped-vm':
        destroy_stopped_vm()
        sys.exit(0)
    elif output == '--destroy-vm':
        destroy_vm(arg)
        sys.exit(0)
    elif output == "--reset-vm":
        reset_vm(arg)
    elif output == '--keep-alive':
        keep_alive = True
    elif output == '--run':
        if arg in runlist:
            run = arg
        else:
            print(f"{run} is not a valid --run option")
            print(UsageMSG)
            sys.exit(1)
    elif output == '--ip':
        ipnc = arg
    elif output == '--server-ip':
        server_ip = arg
    elif output == '--start-interface':
        create_ixautomation_interface()
        exit(0)
    elif output == '--scale':
        scale = ' --scale'
    elif output == '--vm-name':
        vm_name = arg
    elif output == '--dev-test':
        dev_test = ' --dev-test'
    elif output == '--debug-mode':
        debug_mode = ' --debug-mode'
    elif output == '--profile':
        if arg in profile_list:
            profile = arg
        else:
            print(f'Profile "{arg}" not support')
            print(f'Use one of these profile in {profile_list}')
            exit(1)

# look for workspace
try:
    workspace = os.environ["WORKSPACE"]
except KeyError:
    if not os.path.exists(ixautomationconfig):
        print(f"Please add {ixautomationconfig}")
        sys.exit(1)

    syscfg = "WebUI" if "webui-" in run else sys_dict[systype]

    # loop true ixautomation config list to find syscfg
    ixautomationcfglist = open(ixautomationconfig, 'r').readlines()
    for line in ixautomationcfglist:
        linelist = line.rstrip().split('=')
        if syscfg in linelist[0] and "#" not in linelist[0]:
            workspace = linelist[1].replace('"', '').strip()
            break
    else:
        print(f"Please setup {syscfg} path in {ixautomationconfig}")
        sys.exit(1)

start_automation(
    workspace,
    ipnc,
    run,
    keep_alive,
    server_ip,
    scale,
    vm_name,
    dev_test,
    debug_mode,
    profile
)
