#!/usr/bin/env python3.6

import os
import sys
import getpass
import getopt
sys.path.append("/usr/local/lib/ixautomation")
# Source our functions
from functions import jenkins_vm_tests, jenkins_freenas_webui_tests
from functions import jenkins_vm_destroy_all
sys.stdout.flush()
ixautomationconfig = "/usr/local/etc/ixautomation.conf"

loginUser = os.getlogin()
curentUser = getpass.getuser()
argument = sys.argv
if curentUser != "root":
    print("This script must be run as root")
    sys.exit(1)

# start-vm          - Start a vm only for FreeNAS or TrueOS

UsageMSG = """
Usage for %s:

Available Commands:

--run                     - Runs option givin
        vm-tests          - Start (freenas, or trueos) in a VM using vm-bhyve
        api-tests         - Start VM with Python API tests (FreeNAS only)
        middlewared-tests - Start VM with the middleware tests (FreeNAS only)
        webui-tests       - Runs FreeNAS web UI tests using webdriver

--systype                 - Use by run to see what system we need to run
        freenas           - FreeNAS to be run
        trueos            - TrueOS to be run

--ip                      - IP and network card of the machine targeted
        0.0.0.0:card or 0.0.0.0

--destroy-all-vm          - Stop all vm running, remove vm directory and iso

""" % argument[0]

# if have no argumment stop
if len(argument) == 1:
    print(UsageMSG)
    exit()

# list of argument that chould be use.
optionlist = ["run=", "systype=", "ip=", "destroy-all-vm"]
systypelist = ["freenas", "trueos"]
runlist = ["vm-tests", "api-tests", "webui-tests", "middlewared-tests"]
# look if all the argument are there.

try:
    myopts, args = getopt.getopt(argument[1:], 'rsi', optionlist)
except getopt.GetoptError as e:
    print(str(e))
    print(UsageMSG)
    sys.exit(1)

if "--systype" not in myopts and "--run" in myopts:
    print("--run need --systype")
    print(UsageMSG)
    sys.exit(1)

for output, arg in myopts:
    if output == "--destroy-all-vm":
        jenkins_vm_destroy_all()
        sys.exit(0)
    if output == '--run':
        run = arg
    elif output == '--systype':
        systype = arg
    elif output == '--ip':
        ipnc = arg

if run not in runlist:
    print(run + " is not a valid --run option")
    print(UsageMSG)
    sys.exit(1)

if systype not in systypelist:
    print(systype + " is not a valid --systype option")
    print(UsageMSG)
    sys.exit(1)

try:
    workspace = os.environ["WORKSPACE"]
except KeyError:
    if os.path.exists(ixautomationconfig):
        ixautomationcfglist = open(ixautomationconfig, 'r').readlines()
        for line in ixautomationcfglist:
            linelist = line.rstrip().split('=')
            if run == "webui-tests":
                if "WebUI" in linelist[0] and "#" not in linelist[0]:
                    workspace = linelist[1].replace('"', '')
            else:
                if "FreeNAS" in linelist[0] and "#" not in linelist[0]:
                    workspace = linelist[1].replace('"', '')
    else:
        print("Please add " + ixautomationconfig)

try:
    ipnc
except NameError:
    ipnc = None

if run == "vm-tests":
    jenkins_vm_tests(workspace, systype, ipnc, run)
elif run == "api-tests":
    jenkins_vm_tests(workspace, systype, ipnc, run)
elif run == "middlewared-tests":
    jenkins_vm_tests(workspace, systype, ipnc, run)
elif run == "webui-tests":
    jenkins_vm_tests(workspace, systype, ipnc, run)
