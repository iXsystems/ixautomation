#!/usr/bin/env python3

import os
import sys
import getopt
from platform import system
sys.path.append("/usr/local/lib/ixautomation")
# Source our functions
from functions import (
    start_automation,
    destroy_all_vm,
    destroy_vm,
    reset_vm,
    destroy_stopped_vm,
    create_ixautomation_bridge,
    nics_list
)

ixautomationconfig = "/usr/local/etc/ixautomation.conf"

argument = sys.argv
app = argument[0]
sys.stdout.flush()

systype = "truenas"

# list of argument that should be use.
optionlist = [
    "run=",
    "ip=",
    "server-ip=",
    "vm-name=",
    "destroy-all-vm",
    "destroy-stopped-vm",
    "destroy-vm=",
    "keep-alive",
    "reset-vm=",
    "setup-bridge=",
    "scale",
    "dev-test",
    "debug-mode"
]
sys_dict = {
    "truenas": "FreeNAS",
}
runlist = [
    "vm-tests",
    "api-tests",
    "webui-vm"
]

UsageMSG = f"""
Usage for {app}:

Available Commands:

--run                     - Runs the given option see bellow for the options
          vm-tests        - Install TrueNAS in a VM using vm-bhyve and
                            reboot in the installation.
          api-tests       - Start VM with REST API 1.0 tests for FreeNAS
          webui-vm        - Install TrueNAS and boot FreeNAS for UI test

--ip <0.0.0.0>           - IP and network card of the machine targeted to
     or  <0.0.0.0:card>    run test against.

--vm-name vmname          - to create VM with a specific name

--scale                   - To use to run scale test

--server-ip <0.0.0.0>     - IP of the targeted FreeNAS for TrueCommand

--destroy-all-vm          - Stop all VM running, remove VM directory and ISO

--destroy-stopped-vm      - Stop all sopped running VM and remove all files

--destroy-vm <vm_name>    - Stop VM running, the remove VM directory
                            VM name to stop

--reset-vm <0.0.0.0>      - Reset the NAS to the the first boot stat

--setup-bridge <em0>   - Start ixautomation switch interface for FreeBSD

--keep-alive              - Keep the VM alive after test are done

--dev-test                - Start API test with --dev-test to only run
                            development API testing

--debug-mode              - Start API test with middleware debug mode
"""

# if have no argument stop
if len(argument) == 1:
    print(UsageMSG)
    exit()

# look if all the argument are there.
try:
    myopts, args = getopt.getopt(argument[1:], 'rsi', optionlist)
except getopt.GetoptError as e:
    print(str(e))
    print(UsageMSG)
    sys.exit(1)

keep_alive = False
start_interface = False
ipnc = None
server_ip = None
scale = ''
vm_name = None
dev_test = ''
debug_mode = ''

for output, arg in myopts:
    if output == '--destroy-all-vm':
        destroy_all_vm()
        sys.exit(0)
    if output == '--destroy-stopped-vm':
        destroy_stopped_vm()
        sys.exit(0)
    elif output == '--destroy-vm':
        destroy_vm(arg)
        sys.exit(0)
    elif output == "--reset-vm":
        reset_vm(arg)
    elif output == '--keep-alive':
        keep_alive = True
    elif output == '--run':
        run = arg
    elif output == '--ip':
        ipnc = arg
    elif output == '--server-ip':
        server_ip = arg
    elif output == '--setup-bridge':
        if os.getuid() != 0:
            print("You need root privileged to run --setup-bridge")
            exit(1)
        else:
            create_ixautomation_bridge(arg)
            exit(0)
    elif output == '--scale':
        scale = ' --scale'
    elif output == '--vm-name':
        vm_name = arg
    elif output == '--dev-test':
        dev_test = ' --dev-test'
    elif output == '--debug-mode':
        debug_mode = ' --debug-mode'

if system() == "FreeBSD" and "vm-ixautomation" not in nics_list():
    print("The ixautomation bridge is missing run the following command:")
    print("# ixautomation --setup-bridge <interface>\n")
    print("Replace <interface> with you interface like igb1")
    exit(1)

if run not in runlist:
    print(f"{run} is not a valid --run option")
    print(UsageMSG)
    sys.exit(1)

# look for workspace
try:
    workspace = os.environ["WORKSPACE"]
except KeyError:
    if not os.path.exists(ixautomationconfig):
        print(f"Please add {ixautomationconfig}")
        sys.exit(1)

    syscfg = "WebUI" if "webui-" in run else sys_dict[systype]

    # loop true ixautomation config list to find syscfg
    ixautomationcfglist = open(ixautomationconfig, 'r').readlines()
    for line in ixautomationcfglist:
        linelist = line.rstrip().split('=')
        if syscfg in linelist[0] and "#" not in linelist[0]:
            workspace = linelist[1].replace('"', '').strip()
            break
    else:
        print(f"Please setup {syscfg} path in {ixautomationconfig}")
        sys.exit(1)

sysname = sys_dict[systype]

start_automation(
    workspace,
    systype,
    sysname,
    ipnc,
    run,
    keep_alive,
    server_ip,
    scale,
    vm_name,
    dev_test,
    debug_mode
)
