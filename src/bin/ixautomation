#!/usr/bin/env python3

import getopt
import random
import string
import os
import sys
from platform import system
sys.path.append("/usr/local/lib/ixautomation")
# Source our functions
from functions import (
    start_vm,
    destroy_all_vm,
    destroy_vm,
    reset_vm,
    destroy_stopped_vm,
    create_ixautomation_bridge,
    nics_list
)

argument = sys.argv
app = argument[0]
sys.stdout.flush()

systype = "truenas"

# list of argument that should be use.
optionlist = [
    "run",
    "vm-name=",
    "destroy-all-vm",
    "destroy-stopped-vm",
    "destroy-vm=",
    "reset-vm=",
    "setup-bridge=",
]
sys_dict = {
    "truenas": "TrueNAS",
}
runlist = [
    "vm-tests",
    "webui-vm"
]

UsageMSG = f"""
Usage for {app}:

Available Commands:

--run                     - Runs the given option see bellow for the options
          vm-tests    - Install TrueNAS and boot TrueNAS VM for API tests
          webui-vm  - Install TrueNAS and boot TrueNAS VM for UI test

--ip <0.0.0.0>           - IP and network card of the machine targeted to
     or  <0.0.0.0:card>    run test against.

--vm-name vmname          - to create VM with a specific name

--destroy-all-vm          - Stop all VM running, remove VM directory and ISO

--destroy-stopped-vm      - Stop all sopped running VM and remove all files

--destroy-vm <vm_name>    - Stop VM running, the remove VM directory
                            VM name to stop

--reset-vm <0.0.0.0>      - Reset the NAS to the the first boot stat

--setup-bridge <em0>   - Start ixautomation switch interface for FreeBSD

"""

# if have no argument stop
# if len(argument) == 1:
#     print(UsageMSG)
#     exit()

# look if all the argument are there.
try:
    myopts, args = getopt.getopt(argument[1:], 'rsi', optionlist)
except getopt.GetoptError as e:
    print(str(e))
    print(UsageMSG)
    sys.exit(1)

# Crete a default vm name
random_uppercase = ''.join(random.choices(string.ascii_uppercase, k=5))
vm_name = f'{sys_dict[systype]}-{random_uppercase}'

for output, arg in myopts:
    if output == '--run':
        run = arg
    elif output == '--vm-name':
        vm_name = arg
    elif output == '--destroy-all-vm':
        destroy_all_vm()
        sys.exit(0)
    elif output == '--destroy-stopped-vm':
        destroy_stopped_vm()
        sys.exit(0)
    elif output == '--destroy-vm':
        destroy_vm(arg)
        sys.exit(0)
    elif output == "--reset-vm":
        reset_vm(arg)
    elif output == '--setup-bridge':
        if os.getuid() != 0:
            print("You need root privileged to run --setup-bridge")
            exit(1)
        else:
            create_ixautomation_bridge(arg)
            exit(0)

if system() == "FreeBSD" and "vm-ixautomation" not in nics_list():
    print("The ixautomation bridge is missing run the following command:")
    print("# ixautomation --setup-bridge <interface>\n")
    print("Replace <interface> with you interface like igb1")
    exit(1)

try:
    if run not in runlist:
        print(f"{run} is not a valid --run option")
        print(UsageMSG)
        sys.exit(1)
except NameError:
    pass

if not os.path.exists('tests/install.exp'):
    print('tests/install.exp not found make sure you are in a checked out '
          'middleware repo or webui repo when running!')
    exit(1)

start_vm(vm_name)
