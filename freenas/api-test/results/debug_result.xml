<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="pytest" skips="0" tests="2" time="50.870"><testcase classname="debug.debug_test" file="debug.py" line="11" name="test_01_Creating_diagnostic_file" time="50.50678062438965"></testcase><testcase classname="debug.debug_test" file="debug.py" line="15" name="test_02_Verify_that_API_returns_WWW_download_path" time="0.019243717193603516"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;debug.debug_test testMethod=test_02_Verify_that_API_returns_WWW_download_path&gt;

    def test_02_Verify_that_API_returns_WWW_download_path(self):
&gt;       assert GET_OUTPUT(&quot;/system/debug/&quot;, &quot;url&quot;) == &quot;/system/debug/download/&quot;

debug.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
functions.py:29: in GET_OUTPUT
    return getit.json()[inputs]
/usr/local/lib/python3.6/site-packages/requests/models.py:894: in json
    return complexjson.loads(self.text, **kwargs)
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;json.decoder.JSONDecoder object at 0x80627bd30&gt;, s = &apos;POST&apos;, idx = 0

    def raw_decode(self, s, idx=0):
        &quot;&quot;&quot;Decode a JSON document from ``s`` (a ``str`` beginning with
            a JSON document) and return a 2-tuple of the Python
            representation and the index in ``s`` where the document ended.
    
            This can be used to decode a JSON document from a string that may
            have extraneous data at the end.
    
            &quot;&quot;&quot;
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError</failure></testcase></testsuite>